// <auto-generated />
using System;
using Challenge.Orm;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Challenge.Orm.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Challenge.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer")
                        .HasColumnName("postalcode");

                    b.Property<string>("ResellerDocumentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resellerdocumentid");

                    b.HasKey("Id");

                    b.HasIndex("ResellerDocumentId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ResellerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResellerId");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Reseller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("RegistredName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registredname");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tradename");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.ToTable("reseller", (string)null);
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Address", b =>
                {
                    b.HasOne("Challenge.Domain.Entities.Reseller", "Reseller")
                        .WithMany("Addresses")
                        .HasForeignKey("ResellerDocumentId")
                        .HasPrincipalKey("Document")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reseller");
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Challenge.Domain.Entities.Reseller", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ResellerId");
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Reseller", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
