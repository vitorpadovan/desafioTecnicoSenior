services:
  postgrechalangesrv:
    image: 'postgres:17-alpine'
    container_name: postgreschalange
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 10s
      retries: 15
    volumes:
      - './chalange-database/data:/var/lib/postgresql/data'
      - './chalange-database/init-script:/docker-entrypoint-initdb.d/'
  bff:
    image: ${DOCKER_REGISTRY-}bff
    build:
      context: ./src/Backend
      dockerfile: Bff/Dockerfile
    depends_on:
      postgrechalangesrv:
        condition: service_healthy
    ports:  
      - '8080:8080'
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__RabbitMq=${RABBITMQ_CONNECTION}
      - ConnectionStrings__PostgresSqlConnectionString=${POSTGRES_CONNECTION_STRING}
    volumes:
      - './nuget_offline_packages/packages:/root/.nuget/packages:rw'
  frontend:
    build:
      context: ./src/Frontend/chalange-front
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - bff
  rabbitmqchsrv:
    image: 'rabbitmq:management-alpine'
    container_name: rabbitmqchsrv
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
  redischsrv:
    image: 'redis:8.0-M04-alpine'
    container_name: redischsrv
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
  productcounter:
    image: ${DOCKER_REGISTRY-}productcounter
    build:
      context: ./src/Backend
      dockerfile: Functions/ProductCounterAzFunction/Dockerfile
    depends_on:
      bff:
        condition: service_started
      redischsrv:
        condition: service_healthy
      rabbitmqchsrv:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__RabbitMq=${RABBITMQ_CONNECTION}
      - ConnectionStrings__RedisServer=${REDIS_CONNECTION}
      - ConnectionStrings__PostgresSqlConnectionString=${POSTGRES_CONNECTION_STRING}
      - AzureWebJobsStorage=${AZURE_STORAGE}
      - FUNCTIONS_WORKER_RUNTIME=${FUNCTIONS_WORKER_RUNTIME}
  sendtofabric:
    image: ${DOCKER_REGISTRY-}sendtofabric
    build:
      context: ./src/Backend
      dockerfile: Functions/SendToFabric/Dockerfile
    depends_on:
      bff:
        condition: service_started
      redischsrv:
        condition: service_healthy
      rabbitmqchsrv:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__RabbitMq=${RABBITMQ_CONNECTION}
      - ConnectionStrings__RedisServer=${REDIS_CONNECTION}
      - ConnectionStrings__PostgresSqlConnectionString=${POSTGRES_CONNECTION_STRING}
      - AzureWebJobsStorage=${AZURE_STORAGE}
      - FUNCTIONS_WORKER_RUNTIME=${FUNCTIONS_WORKER_RUNTIME}
      - ServiceUrl=${SERVICE_URL}
      - ServiceUser=${SERVICE_USER}
      - ServicePassword=${SERVICE_PASSWORD}
